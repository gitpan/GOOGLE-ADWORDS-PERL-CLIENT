# Please see http://code.google.com/apis/adwords/docs/headers.html
# for an overview of header information.

# A string of your choosing, used to identify your application.
userAgent=INSERT_USER_AGENT_HERE

# A 22 character Developer Token.
developerToken=INSERT_DEVELOPER_TOKEN_HERE

# To use an alternative URL in case you want to manually proxy your requests
# or fake the API servers.
# alternateUrl=https://my-fake-server-address

# The Client Customer ID of the client account your application will access.
# This can be programmatically set in the Client object as
# $client->set_client_id
clientId=INSERT_CLIENT_CUSTOMER_ID_HERE

### Peer verification of SSL certificates ###
#
# To avoid spoofing attacks, enable either a CAPath or CAFile for SSL
# certificates validation.
#
# This library can use two different underlying SSL modules either
# IO::Socket::SSL or Crypt::SSLeay, being IO::Socket::SSL the default and
# recommended since it can do certificate authenticity validation as well as
# hostname validation while Crypt::SSLeay does not support hostname validation.

# The certificate authority directory to search in when performing peer
# validation. For example: /etc/ssl/certs
# CAPath=<PATH TO CERTIFICATE AUTHORITY DIRECTORY>

# The certificate authority file to use when performing peer validation.
# For example: /etc/ssl/certs/ca-certificates.crt
# CAFile=<PATH TO CERTIFICATE AUTHORITY FILE>

### Authorization Mechanisms ###
#
# The library supports the OAuth2, OAuth1.0a and ClientLogin mechanisms. Need to
# choose one, un-comment and fill in its details.
#
# More details about authorization options supported by the library can be found
# in the README, section "Authorization Options".
#
# Also to learn more about API authorization please visit
# https://developers.google.com/accounts/docs/GettingStarted

### OAuth2 ###

# Un-comment the following keys to use OAuth 2 authorization.
# All these values are found in the Google API Console.
#
# oAuth2ClientId=INSERT_OAUTH_CLIENT_ID_HERE

# For the Web/Installed Applications flow, un-comment the following.
#
# oAuth2ClientSecret=INSERT_OAUTH_CLIENT_SECRET_HERE
#
# Then you need one of the following two options.
#
# Option 1: un-comment the following if you already have OAuth2 authorization
# tokens.
# oAuth2AccessToken=INSERT_OAUTH_TOKEN_HERE
# oAuth2RefreshToken=INSERT_OAUTH_TOKEN_HERE
#
# Options 2: Use the library to trigger the authorization flow and have the
# user authorize access to his account data. See the use_oauth2.pl example
# to learn using the library for requesting user authorization.
#
# Optionally, un-comment the following if you want to change defaults for the
# user interaction flow.
# Default offline
# oAuth2AccessType=[online|offline]
# Default auto
# oAuth2ApprovalPrompt=[force|auto]
# Defaults to urn:ietf:wg:oauth:2.0:oob
# oAuth2RedirectUri=INSERT_REDIRECT_URI_HERE

# For the Service Accounts flow, un-comment the following.
#
# In order to user the library for service accounts you need to transform your
# p12 certificate as generated by the Google API Console to PEM format. And make
# sure no password is set.
# In Linux/Unix systems with openssl installed you can execute.
# > openssl pkcs12 -in {private-key}.p12 -out {private-key}.pem -nodes
#
# oAuth2ServiceAccountEmailAddress=INSERT_OAUTH_CLIENT_EMAIL_HERE
# oAuth2ServiceAccountDelegateEmail=INSERT_EMAIL_OF_ACCOUNT_TO_IMPERSONATE_HERE
# oAuth2ServiceAccountPEMFile=INSERT_PATH_TO_YOUR_CERTIFICATE_FILE_HERE

### OAuth1 ###

# Notice this authorization method is already deprecated and OAuth2 should be
# used in preference.

# Un-comment the following to use OAuth 1.0a as authorization method.
# oAuthConsumerKey=INSERT_OAUTH_CONSUMER_KEY_HERE
# oAuthConsumerSecret=INSERT_OAUTH_CONSUMER_SECRET_HERE
# oAuthDisplayName=OPTIONAL_INSERT_OAUTH_DISPLAY_NAME_HERE

# Optionally: un-comment the following if you already have OAuth 1.0a authorization tokens.
# oAuthToken=INSERT_OAUTH_TOKEN_HERE
# oAuthTokenSecret=INSERT_OAUTH_TOKEN_SECRET_HERE

### ClientLogin ###

# Notice this authorization method is already deprecated and OAuth2 should be
# used in preference.

# Un-comment the following to use ClientLogin
# email=INSERT_LOGIN_EMAIL_HERE
# password=INSERT_PASSWORD_HERE

# Or set the following to use an existing AuthToken.
# This is optional, and if set email and password will not be used.
# authToken=INSERT_AUTH_TOKEN_HERE
